name: Daily Attendance Report

on:
  schedule:
    # KST is UTC+9. Run at 9:35 AM KST and 6:35 PM KST daily.
    # 9:35 AM KST = 00:35 UTC
    # 6:35 PM KST = 09:35 UTC
    # Cron format: minute hour day(month) month day(week)
    - cron: '35 0,9 * * *' # Runs at 00:35 and 09:35 UTC daily

  workflow_dispatch: # Allows manual triggering from GitHub Actions tab
    inputs:
      logLevel:
        description: 'Log level for script run'
        required: false
        default: 'INFO'

jobs:
  run-attendance-report:
    runs-on: ubuntu-latest # Use a standard Linux runner provided by GitHub
    # Optional: Set timeout for the job
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # Cache pip dependencies

      - name: Install Google Chrome Stable
        run: |
          echo "Installing Google Chrome Stable..."
          sudo apt-get update -y
          # Install dependencies for Chrome and fonts
          sudo apt-get install -y wget gnupg libnss3 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcups2 libdbus-1-3 libdrm2 libgbm1 libgtk-3-0 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 libasound2 libpangocairo-1.0-0 xdg-utils
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update -y
          sudo apt-get install -y google-chrome-stable
          echo "Verifying Chrome installation..."
          google-chrome-stable --version || echo "Chrome verification failed"

      - name: Install Korean Fonts (Nanum)
        run: |
          echo "Installing Korean fonts..."
          sudo apt-get update -y
          sudo apt-get install -y fonts-nanum*
          # Rebuild font cache
          sudo fc-cache -fv
          echo "Font installation complete."

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Python dependencies installed."

      - name: Run Attendance Bot Script
        env:
          # Map GitHub secrets to environment variables for the script
          # ENSURE these secret names EXACTLY match your GitHub Repository Secrets
          WEBMAIL_USERNAME: ${{ secrets.WEBMAIL_USERNAME }}
          WEBMAIL_PASSWORD: ${{ secrets.WEBMAIL_PASSWORD }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          # Set Matplotlib cache directory to a writable location within the workspace
          # This prevents potential permission issues when matplotlib tries to build its font cache
          MPLCONFIGDIR: ${{ github.workspace }}/.cache/matplotlib
          # Pass log level from manual trigger if provided (optional)
          LOG_LEVEL: ${{ github.event.inputs.logLevel || 'INFO' }}
        run: |
          echo "Setting Matplotlib cache directory..."
          mkdir -p $MPLCONFIGDIR
          echo "Running Python script: work_day_bot.py..."
          # You could modify the script to accept log level via arg or env var
          # Example: python work_day_bot.py --log-level $LOG_LEVEL
          python work_day_bot.py
          echo "Script execution finished."

      # Upload generated image and screenshots as artifacts for debugging
      # This step runs whether the previous steps succeeded or failed
      - name: Upload generated artifacts
        uses: actions/upload-artifact@v4
        if: always() # Always run this step
        with:
          name: attendance-artifacts-${{ github.run_id }}
          path: |
            *.png  # Upload any PNG file (includes report image and screenshots)
            # *.log # Optionally upload log files if your script generates them
          if-no-files-found: ignore # Don't fail the workflow if no PNG files are found
